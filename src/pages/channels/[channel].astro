---
import Layout from '../../layouts/Layout.astro';
import DiscordLayout from '../../components/DiscordLayout.astro';
import Message from '../../components/Message.astro';

// Define types
interface MessageData {
  id: string;
  author: string;
  content: string;
  timestamp: string;
  avatar: string;
  isEdited?: boolean;
  reactions?: Array<{
    emoji: string;
    count: number;
  }>;
}

interface ChannelInfo {
  name: string;
  description: string;
  icon: string;
}

// Get channel from URL params
export async function getStaticPaths() {
  return [
    { params: { channel: 'general' } },
    { params: { channel: 'ubi-policy' } },
    { params: { channel: 'economics' } },
  ];
}

const { channel } = Astro.params;

// Load messages for this specific channel
let messages: MessageData[] = [];
try {
  const channelData = await import(`../../data/channels/${channel}.json`);
  messages = channelData.default.messages || [];
} catch (error) {
  // Fallback to general messages if channel doesn't exist
  const generalData = await import('../../data/messages.json');
  messages = generalData.default.messages || [];
}

// Channel metadata
const channelInfo: Record<string, ChannelInfo> = {
  'general': {
    name: 'general',
    description: 'General UBI discussion',
    icon: '#'
  },
  'ubi-policy': {
    name: 'ubi-policy', 
    description: 'UBI policy and implementation',
    icon: '#'
  },
  'economics': {
    name: 'economics',
    description: 'Economic theory and analysis',
    icon: '#'
  }
};

const currentChannel = channelInfo[channel as string] || channelInfo['general'];
---

<Layout>
  <DiscordLayout channel={channel}>
    {messages.map((message) => (
      <Message
        author={message.author}
        content={message.content}
        timestamp={message.timestamp}
        avatar={message.avatar}
        isEdited={message.isEdited}
        reactions={message.reactions}
      />
    ))}
  </DiscordLayout>
</Layout>
